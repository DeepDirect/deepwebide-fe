name: GitHub 이슈 수정 시 Jira Task 자동 반영

on:
  issues:
    types: [edited]

permissions:
  issues: write

jobs:
  sync-jira:
    runs-on: ubuntu-latest
    steps:
      - name: GitHub CLI 및 jq 설치
        run: |
          sudo apt-get update
          sudo apt-get install -y gh jq

      # Jira 이슈 키 추출 (GitHub 이슈 코멘트에서 DP-123 형태로 추출)
      - name: Jira 이슈 키 추출
        id: get-jira-key
        run: |
          ISSUE_NUM=${{ github.event.issue.number }}
          OWNER=${{ github.repository_owner }}
          REPO=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          JIRA_KEY=$(gh issue view "$ISSUE_NUM" --repo "$OWNER/$REPO" --json comments -q '.comments[].body' | grep -oE '[A-Z]+-[0-9]+' | head -n 1 || echo "")
          echo "JIRA_ISSUE=$JIRA_KEY" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Epic/Start/Due 정보 추출
      - name: Epic 및 일정 정보 추출
        run: |
          echo "EPIC_KEY=$(echo '${{ github.event.issue.body }}' | grep -oE 'epic: [A-Z]+-[0-9]+' | awk '{print $2}')" >> $GITHUB_ENV
          echo "START_DATE=$(echo '${{ github.event.issue.body }}' | grep -oE 'start: [0-9]{4}-[0-9]{2}-[0-9]{2}' | awk '{print $2}')" >> $GITHUB_ENV
          echo "DUE_DATE=$(echo '${{ github.event.issue.body }}' | grep -oE 'due: [0-9]{4}-[0-9]{2}-[0-9]{2}' | awk '{print $2}')" >> $GITHUB_ENV

      # Base64 인코딩으로 인증 헤더 생성
      - name: 인증 헤더 생성 (Base64 인코딩)
        run: |
          AUTH=$(echo -n "${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" | base64 | tr -d '\n')
          echo "JIRA_AUTH=Basic $AUTH" >> $GITHUB_ENV

      # Jira Task 업데이트 (with jq)
      - name: Jira Task 내용 동기화
        if: env.JIRA_ISSUE != ''
        run: |
          SUMMARY="${{ github.event.issue.title }}"
          DESCRIPTION="🔄 GitHub Issue 동기화 내용:\n\n${{ github.event.issue.body }}"

          jq -n \
            --arg summary "$SUMMARY" \
            --arg description "$DESCRIPTION" \
            --arg epic "${{ env.EPIC_KEY }}" \
            --arg start "${{ env.START_DATE }}" \
            --arg due "${{ env.DUE_DATE }}" \
            '{
              fields: {
                summary: $summary,
                description: $description,
                customfield_10014: $epic,
                customfield_10015: $start,
                duedate: $due
              }
            }' > payload.json

          echo "== 생성된 요청 바디 =="
          cat payload.json

          curl -X PUT \
            --url "${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/${{ env.JIRA_ISSUE }}" \
            -H "Authorization: $JIRA_AUTH" \
            -H "Content-Type: application/json" \
            -d @payload.json

      # 코멘트로 동기화 알림
      - name: 코멘트로 동기화 결과 남기기
        uses: actions/github-script@v7
        if: env.JIRA_ISSUE != ''
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
