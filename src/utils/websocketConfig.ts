// WebSocket Ïó∞Í≤∞ ÏÑ§Ï†ï Ïú†Ìã∏Î¶¨Ìã∞
export const getWebSocketConfig = () => {
  const isDevelopment = import.meta.env.DEV;
  const baseUrl = import.meta.env.VITE_BASE_URL;

  return {
    // Ï±ÑÌåÖ WebSocket URL
    chatWsUrl: isDevelopment
      ? 'ws://localhost:8080/chat'
      : baseUrl.replace(/^https?/, 'wss').replace(/\/$/, '') + '/chat',

    // Ïû¨Ïó∞Í≤∞ ÏÑ§Ï†ï
    reconnectOptions: {
      maxAttempts: isDevelopment ? 3 : 10,
      delay: isDevelopment ? 1000 : 3000,
      backoffFactor: 1.5,
    },

    // Ïù∏Ï¶ù ÏÑ§Ï†ï
    authRequired: !isDevelopment || import.meta.env.VITE_AUTH_SKIP_VALIDATION !== 'true',
  };
};

// WebSocket URL ÏÉùÏÑ± Ìó¨Ìçº
export const buildWebSocketUrl = (baseUrl: string, params: Record<string, string>) => {
  const url = new URL(baseUrl);
  Object.entries(params).forEach(([key, value]) => {
    if (value) url.searchParams.set(key, value);
  });
  return url.toString();
};

// ÌôòÍ≤ΩÎ≥Ñ Î°úÍπÖ
export const wsLogger = {
  info: (message: string, ...args: unknown[]) => {
    if (import.meta.env.DEV) {
      console.log(`üîå [WS] ${message}`, ...args);
    }
  },
  error: (message: string, ...args: unknown[]) => {
    console.error(`‚ùå [WS] ${message}`, ...args);
  },
  warn: (message: string, ...args: unknown[]) => {
    if (import.meta.env.DEV) {
      console.warn(`‚ö†Ô∏è [WS] ${message}`, ...args);
    }
  },
};
